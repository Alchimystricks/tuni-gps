{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import unittest\
from tuni_gps_system import TUniEvent, TUniSat, TUniSystem\
\
class TestTUniSystem(unittest.TestCase):\
\
    def test_reconstruction_with_single_satellite(self):\
        """Tests if the reconstruction for a single satellite is correct."""\
        event = TUniEvent(energy=10.0)\
        sat = TUniSat(\
            signal=\{"doppler": 0.01, "energy": event.energy\},\
            measured_time=100.0,\
            measured_pos=[1000.0, 1000.0, 1000.0],\
            context=\{"gravitational_influence": 0.02, "plasma_noise": 0.0\}\
        )\
        system = TUniSystem([sat])\
        result = system.get_joint_reconstruction()\
\
        # Expected time: 100.0 - (0.01 + 0.02) = 99.97\
        self.assertAlmostEqual(result["reconstructed_time"], 99.97, places=6)\
\
    def test_weighting_with_two_satellites(self):\
        """Tests if the satellite with less distortion is weighted more heavily."""\
        event = TUniEvent(energy=50.0)\
        # Sat 1: Low distortion (delta = 0.03)\
        sat1 = TUniSat(\
            signal=\{"doppler": 0.01, "energy": event.energy\}, \
            measured_time=100.03, measured_pos=[1.0, 1.0, 1.0], context=\{\}\
        )\
        # Sat 2: High distortion (delta = 0.09)\
        sat2 = TUniSat(\
            signal=\{"doppler": 0.09, "energy": event.energy\}, \
            measured_time=100.09, measured_pos=[2.0, 2.0, 2.0], context=\{\}\
        )\
        system = TUniSystem([sat1, sat2])\
        result = system.get_joint_reconstruction()\
        \
        # Resulting position should be closer to Sat 1\
        self.assertTrue(result["reconstructed_position"][0] < 1.5)\
\
if __name__ == '__main__':\
    unittest.main()}